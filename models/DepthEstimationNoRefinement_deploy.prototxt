name: "DepthEstimationNoRefinement"
input:"water"
input_dim:1
input_dim:3
input_dim:56
input_dim:56

layer {
  bottom: "water"
  top: "conv2_2"
  name: "conv2_2_modified"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    weight_filler {
      type: "msra"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    num_output: 128
    pad: 1
    kernel_size: 3
  }
}

layer {
  bottom: "conv2_2"
  top: "conv2_2"
  name: "relu2_2"
  type: "ReLU"
}

layer {
  bottom: "conv2_2"
  top: "conv3_1"
  name: "conv3_1"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    weight_filler {
      type: "msra"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    num_output: 256
    pad: 1
    kernel_size: 3
  }
}

layer {
  bottom: "conv3_1"
  top: "conv3_1"
  name: "relu3_1"
  type: "ReLU"
}
layer {
  bottom: "conv3_1"
  top: "conv3_2"
  name: "conv3_2"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    weight_filler {
      type: "msra"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    num_output: 256
    pad: 1
    kernel_size: 3
  }
}

layer {
  bottom: "conv3_2"
  top: "conv3_2"
  name: "relu3_2"
  type: "ReLU"
}
layer {
  bottom: "conv3_2"
  top: "conv3_3"
  name: "conv3_3"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    weight_filler {
      type: "msra"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    num_output: 256
    pad: 1
    kernel_size: 3
  }
}

layer {
  bottom: "conv3_3"
  top: "conv3_3"
  name: "relu3_3"
  type: "ReLU"
}
layer {
  bottom: "conv3_3"
  top: "pool3"
  top: "pool3_mask"
  name: "pool3"
  type: "Pooling"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "encdrop3"
  type: "Dropout"
  bottom: "pool3"
  top: "pool3"
  dropout_param {
    dropout_ratio: 0.5
  }
}
layer {
  bottom: "pool3"
  top: "conv4_1"
  name: "conv4_1"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    weight_filler {
      type: "msra"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}

layer {
  bottom: "conv4_1"
  top: "conv4_1"
  name: "relu4_1"
  type: "ReLU"
}
layer {
  bottom: "conv4_1"
  top: "conv4_2"
  name: "conv4_2"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    weight_filler {
      type: "msra"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}

layer {
  bottom: "conv4_2"
  top: "conv4_2"
  name: "relu4_2"
  type: "ReLU"
}
layer {
  bottom: "conv4_2"
  top: "conv4_3"
  name: "conv4_3"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    weight_filler {
      type: "msra"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}

layer {
  bottom: "conv4_3"
  top: "conv4_3"
  name: "relu4_3"
  type: "ReLU"
}
layer {
  bottom: "conv4_3"
  top: "pool4"
  top: "pool4_mask"
  name: "pool4"
  type: "Pooling"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "encdrop4"
  type: "Dropout"
  bottom: "pool4"
  top: "pool4"
  dropout_param {
    dropout_ratio: 0.5
  }
}
layer {
  bottom: "pool4"
  top: "conv5_1"
  name: "conv5_1"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    weight_filler {
      type: "msra"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}

layer {
  bottom: "conv5_1"
  top: "conv5_1"
  name: "relu5_1"
  type: "ReLU"
}
layer {
  bottom: "conv5_1"
  top: "conv5_2"
  name: "conv5_2"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    weight_filler {
      type: "msra"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}

layer {
  bottom: "conv5_2"
  top: "conv5_2"
  name: "relu5_2"
  type: "ReLU"
}
layer {
  bottom: "conv5_2"
  top: "conv5_3"
  name: "conv5_3"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    weight_filler {
      type: "msra"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}

layer {
  bottom: "conv5_3"
  top: "conv5_3"
  name: "relu5_3"
  type: "ReLU"
}
layer {
  bottom: "conv5_3"
  top: "pool5"
  top: "pool5_mask"
  name: "pool5"
  type: "Pooling"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "encdrop5"
  type: "Dropout"
  bottom: "pool5"
  top: "pool5"
  dropout_param {
    dropout_ratio: 0.5
  }
}
layer {
  name: "upsample5"
  type: "Upsample"
  bottom: "pool5"
  top: "pool5_D"
  bottom: "pool5_mask"
  upsample_param {
    scale: 2
  }
}
layer {
  bottom: "pool5_D"
  top: "conv5_3_D"
  name: "conv5_3_D"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    weight_filler {
      type: "msra"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}

layer {
  bottom: "conv5_3_D"
  top: "conv5_3_D"
  name: "relu5_3_D"
  type: "ReLU"
}

layer {
  bottom: "conv5_3_D"
  top: "conv5_2_D"
  name: "conv5_2_D"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    weight_filler {
      type: "msra"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}

layer {
  bottom: "conv5_2_D"
  top: "conv5_2_D"
  name: "relu5_2_D"
  type: "ReLU"
}
layer {
  bottom: "conv5_2_D"
  top: "conv5_1_D"
  name: "conv5_1_D"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    weight_filler {
      type: "msra"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}

layer {
  bottom: "conv5_1_D"
  top: "conv5_1_D"
  name: "relu5_1_D"
  type: "ReLU"
}
layer {
  name: "decdrop5"
  type: "Dropout"
  bottom: "conv5_1_D"
  top: "conv5_1_D"
  dropout_param {
    dropout_ratio: 0.5
  }
}
layer {
  name: "upsample4"
  type: "Upsample"
  bottom: "conv5_1_D"
  top: "pool4_D"
  bottom: "pool4_mask"
  upsample_param {
    scale: 2
  }
}
layer {
  bottom: "pool4_D"
  top: "conv4_3_D"
  name: "conv4_3_D"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    weight_filler {
      type: "msra"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}

layer {
  bottom: "conv4_3_D"
  top: "conv4_3_D"
  name: "relu4_3_D"
  type: "ReLU"
}
layer {
  bottom: "conv4_3_D"
  top: "conv4_2_D"
  name: "conv4_2_D"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    weight_filler {
      type: "msra"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}

layer {
  bottom: "conv4_2_D"
  top: "conv4_2_D"
  name: "relu4_2_D"
  type: "ReLU"
}
layer {
  bottom: "conv4_2_D"
  top: "conv4_1_D"
  name: "conv4_1_D"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    weight_filler {
      type: "msra"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    num_output: 256
    pad: 1
    kernel_size: 3
  }
}

layer {
  bottom: "conv4_1_D"
  top: "conv4_1_D"
  name: "relu4_1_D"
  type: "ReLU"
}
layer {
  name: "decdrop4"
  type: "Dropout"
  bottom: "conv4_1_D"
  top: "conv4_1_D"
  dropout_param {
    dropout_ratio: 0.5
  }
}
layer {
  name: "upsample3"
  type: "Upsample"
  bottom: "conv4_1_D"
  top: "pool3_D"
  bottom: "pool3_mask"
  upsample_param {
    scale: 2
  }
}
layer {
  bottom: "pool3_D"
  top: "conv3_3_D"
  name: "conv3_3_D"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    weight_filler {
      type: "msra"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    num_output: 256
    pad: 1
    kernel_size: 3
  }
}

layer {
  bottom: "conv3_3_D"
  top: "conv3_3_D"
  name: "relu3_3_D"
  type: "ReLU"
}
layer {
  bottom: "conv3_3_D"
  top: "conv3_2_D"
  name: "conv3_2_D"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    weight_filler {
      type: "msra"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    num_output: 256
    pad: 1
    kernel_size: 3
  }
}

layer {
  bottom: "conv3_2_D"
  top: "conv3_2_D"
  name: "relu3_2_D"
  type: "ReLU"
}
layer {
  bottom: "conv3_2_D"
  top: "conv3_1_D"
  name: "conv3_1_D_modified"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    weight_filler {
      type: "msra"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    num_output: 1
    pad: 1
    kernel_size: 3
  }
}

layer {
  bottom: "conv3_1_D"
  top: "conv3_1_D"
  name: "relu3_1_D"
  type: "ReLU"
}

